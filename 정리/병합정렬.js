// 병합정렬
// 일단 arr을 반으로 나누고 그걸 나누고 나누어지지않을떄까지 나눔
// 그 다음에 하나씩 합쳐짐 정렬된값끼리 병합을할떄 맨 앞의 크기를 비교하며 병합
// (O(nLogn))

let 입력값 = [5, 10, 66, 77, 54, 32, 11, 15];

//  분할
//  [5, 10, 66, 77],[ 54, 32, 11, 15];
//  [5, 10], [66, 77],[ 54, 32], [11, 15];
//  [5], [10], [66], [77],[ 54], [32], [11], [15];

//  정복
//  작은값이 앞으로 오게
//  [5, 10], [66, 77], [32, 54], [11, 15]
//  [5, 10], [66, 77], [32, 54], [11, 15]
//  0번쨰만 비교를함 5, 66 비교후 5를 앞배열에서 뺴고 결과에 넣어준다
//  그 다음 10과 66비교 하면 맨 앞 배열이 사라짐 다음 2번째 배열은 이미 정렬된 상태니 바로 병합
//  [5, 10, 66, 77],[11, 15, 32, 54]
//  [5, 10, 11, 15, 32, 54, 66, 77 ]

// function 병합정렬(입력배열) {
//   let 입력배열의길이 = 입력배열.length;

//   if (입력배열의길이 <= 1) {
//     return 입력배열;
//   }

//   let 중간값 = parseInt(입력배열의길이 / 2);
//   let 그룹하나 = 병합정렬(입력배열.slice(0, 중간값));
//   let 그룹둘 = 병합정렬(입력배열.slice(중간값));

//   return `그룹하나 : ${그룹하나}, 그룹둘 : ${그룹둘}\n`;
// }

// console.log(병합정렬(입력값));

// let 입력값 = [5, 10, 66, 77, 54, 32, 11, 15];

function 병합정렬(입력배열) {
  let 입력배열의길이 = 입력배열.length;
  let 결과값 = [];

  if (입력배열의길이 <= 1) {
    return 입력배열;
  }

  // [5,10,66,77 //// 32,54,11,15]
  console.log(입력배열, '입력배열');

  let 중간값 = parseInt(입력배열의길이 / 2);
  let 그룹하나 = 병합정렬(입력배열.slice(0, 중간값));
  // [5]
  console.log(그룹하나, '그룹하나');
  let 그룹둘 = 병합정렬(입력배열.slice(중간값));
  console.log(그룹둘, '그룹들');
  // [10]

  // 병합정렬([5,10]) ==> [5,10]

  while (그룹하나.length !== 0 && 그룹둘.length !== 0) {
    if (그룹하나[0] < 그룹둘[0]) {
      결과값.push(그룹하나.shift());
    } else {
      결과값.push(그룹둘.shift());
    }
  }

  while (그룹하나.length !== 0) {
    결과값.push(그룹하나.shift());
  }

  while (그룹둘.length !== 0) {
    결과값.push(그룹둘.shift());
  }

  console.log(결과값, '결과값');

  return 결과값;
}

console.log(병합정렬(입력값));
